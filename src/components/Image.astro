---
/** Component to use @astrojs/image with custom defaults, like loading
 *  higher resolution images while keeping the same size attributes in
 *  the HTML, and .webp formatting. */

import { getImage } from '@astrojs/image';
import type { TransformOptions } from '@astrojs/image/dist/loaders';
import { omit } from '../scripts/utils';

export interface Props extends Omit<TransformOptions, 'src'> {
  src: string | ImageMetadata | Promise<{ default: ImageMetadata }>;
  alt: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  scale?: number;
}

/** Type-safe function that returns `Astro.props` with given default values. */
const withDefaults = <T extends Partial<Props>>(d: T): Props & T => ({ ...d, ...Astro.props });

const props = withDefaults({
  quality: 80,
  format: 'webp',
  loading: 'lazy',
  scale: 2,
});

type ScaleObject = Pick<astroHTML.JSX.ImgHTMLAttributes, 'width' | 'height'>;

/** Scales width and height of object by scale factor.
 * @example scaleObject({ width: 10, height: 20 }) === { width: 20, height: 40 } */
const scaleObject = <T extends ScaleObject>(numbers: T, scale: number) => ({
  ...numbers,
  width: numbers.width && (numbers.width as number) * scale,
  height: numbers.height && (numbers.height as number) * scale,
});

/** Hacky function that scales the width and height attributes passed
 *  to the `getImage` function to display higher-quality images. */
const getScaledImage = async () => {
  const { width, height, scale, loading, decoding } = props;
  const sizes = scaleObject({ width, height }, scale);
  const img = await getImage({ ...props, ...sizes });
  const attrs = scaleObject(omit('scale', img), 1 / scale);
  return { ...attrs, loading, decoding };
};
---

<img {...(await getScaledImage())} />
